{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,cAAc,CAAA;AACrC,OAAO,EAAE,kBAAkB,EAAE,MAAM,SAAS,CAAA;AAqB5C,0BAA0B;AAC1B,SAAS,eAAe,CAAC,KAA4B;IACnD,MAAM,EACJ,GAAG,GAAG,IAAI;IACV,aAAa;IACb,MAAM,EAAE,UAAU,GAAG,MAAM,CAAC,MAAM,GACnC,GAAG,KAAK,IAAK,EAA2B,CAAA;IAEzC,IAAI,CAAC,GAAG;QAAE,OAAO,UAAU,CAAA;IAC3B,IAAI,CAAC,UAAU;QAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;IAEpD,8EAA8E;IAC9E,sEAAsE;IACtE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;IAErC,OAAO,MAAM,CAAA;IAEb,kFAAkF;IAClF,qEAAqE;IACrE,SAAS,MAAM,CAAC,MAAW;QACzB,8DAA8D;QAC9D,yDAAyD;QACzD,MAAM,QAAQ,GAAa,UAAU,CAAC,OAAO,MAAM,CAAC,CAAA;QACpD,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;QAE/B,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;IACjD,CAAC;AACH,CAAC;AAED,eAAe,eAAe,CAAA","sourcesContent":["import evaluators from './evaluators'\nimport { errorMissingExpect } from './utils'\n\nimport type {\n  ConfigureInvertProps,\n  JestInvert,\n  JestGlobalExpect,\n} from './@types'\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      expect: JestGlobalExpect\n    }\n  }\n}\n\n// Function signatures\nfunction configureInvert(\n  props?: ConfigureInvertProps\n): JestInvert | JestGlobalExpect | undefined\n\n// Function implementation\nfunction configureInvert(props?: ConfigureInvertProps) {\n  const {\n    run = true,\n    // @ts-ignore\n    expect: jestExpect = global.expect,\n  } = props || ({} as ConfigureInvertProps)\n\n  if (!run) return jestExpect\n  if (!jestExpect) throw new Error(errorMissingExpect)\n\n  // Jest's original expect function has additional method calls attached to it;\n  //    therefore, we must retain references to them on the new function\n  Object.setPrototypeOf(invert, expect)\n\n  return invert\n\n  // -------------------------------------------------------------------------------\n  // Placed as a nested function here to utilize jestExpect via closure\n  function invert(actual: any): JestInvert {\n    // A map is used here instead of if statements so as to reduce\n    //    the number of unnecessary code paths being checked.\n    const evaluate: Function = evaluators[typeof actual]\n    const result = evaluate(actual)\n\n    return jestExpect ? jestExpect(result) : result\n  }\n}\n\nexport default configureInvert\n"]}